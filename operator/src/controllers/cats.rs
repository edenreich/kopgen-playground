// This file is generated by kopgen. Do not edit manually. If you need to make adjustments add it to .openapi-generator-ignore file.
use std::{sync::Arc, time::Duration};

use futures::StreamExt;
use kube::api::{Api, PostParams, Resource};
use kube_runtime::{controller::Action, watcher, Controller};
use log::{error, info, warn};

use openapi::{
    apis::{
        cats_api::{create_cat, delete_cat_by_id, get_cat_by_id, update_cat_by_id},
        configuration::Configuration,
    },
    models::Cat as CatDto,
};

use crate::{
    errors::OperatorError,
    types::cat::{Cat, CatSpec, CatStatus},
    {add_finalizer, create_condition, remove_finalizer, update_status},
};

const REQUEUE_AFTER_IN_SEC: u64 = 30;
const API_URL: &str = "http://localhost:8080";
const API_USER_AGENT: &str = "k8s-operator";

struct ExtraArgs {
    kube_client: Api<Cat>,
}

pub async fn handle(kube_client: Api<Cat>) -> Result<(), OperatorError> {
    info!("Starting the controller");
    let controller = Controller::new(kube_client.clone(), watcher::Config::default());

    let extra_args = Arc::new(ExtraArgs {
        kube_client: kube_client.clone(),
    });

    info!("Running the controller");
    controller
        .run(reconcile, error_policy, extra_args)
        .for_each(|res| async {
            match res {
                Ok(action) => info!("Reconciliation was successful, action: {:?}", action),
                Err(e) => error!("Error reconciling: {:?}", e),
            }
        })
        .await;

    info!("Cat Controller has stopped");
    Ok(())
}

async fn reconcile(cat: Arc<Cat>, ctx: Arc<ExtraArgs>) -> Result<Action, OperatorError> {
    let kube_client = ctx.kube_client.clone();
    let mut cat = cat.as_ref().clone();
    let uuid = cat
        .status
        .as_ref()
        .and_then(|status| status.uuid.clone())
        .unwrap_or_default();

    if cat.status.is_none() {
        add_default_status(&kube_client, &mut cat).await?;
    }

    if cat.meta().deletion_timestamp.is_some() {
        handle_delete(&kube_client, &mut cat, &uuid).await?;
    } else if uuid.is_empty() {
        handle_create(&kube_client, &mut cat).await?;
    } else if cat.meta().generation != cat.status.as_ref().unwrap().observed_generation {
        handle_update(&kube_client, &mut cat, &uuid).await?;
    }

    check_for_drift(&kube_client, &mut cat).await?;
    Ok(Action::requeue(Duration::from_secs(REQUEUE_AFTER_IN_SEC)))
}

async fn get_client_config() -> Result<Configuration, OperatorError> {
    let config = Configuration {
        base_path: API_URL.to_string(),
        client: reqwest::Client::new(),
        user_agent: Some(API_USER_AGENT.to_string()),
        bearer_access_token: Some(std::env::var("ACCESS_TOKEN").unwrap_or_default()),
        ..Default::default()
    };
    Ok(config)
}

async fn add_default_status(kube_client: &Api<Cat>, cat: &mut Cat) -> Result<(), OperatorError> {
    cat.status = Some(CatStatus {
        conditions: vec![],
        uuid: None,
        observed_generation: Some(0),
    });
    update_status(kube_client, cat.clone())
        .await
        .map_err(|e| OperatorError::FailedToUpdateStatus(e.into()))
}

pub async fn check_for_drift(kube_client: &Api<Cat>, cat: &mut Cat) -> Result<(), OperatorError> {
    let dto = converters::kube_type_to_dto(cat.clone());
    let uuid = converters::uuid_to_string(dto.uuid).unwrap_or_default();
    let config = get_client_config().await?;

    if uuid.is_empty() {
        warn!("Cat has no status, cannot get by id or check for drift. Skipping...");
        return Ok(());
    }

    match get_cat_by_id(&config, &uuid).await {
        Ok(dto) => {
            let remote_cat = converters::dto_to_kube_type(dto);
            if remote_cat != cat.spec {
                let current_cat_dto = converters::kube_type_to_dto(cat.clone());
                warn!("Cat has drifted remotely, sending an update to remote...");
                match update_cat_by_id(&config, &uuid, current_cat_dto).await {
                    Ok(_) => {
                        info!("Cat updated successfully");
                        let condition = create_condition(
                            "Updated",
                            "AvailableUpdated",
                            "Updated the resource",
                            "Resource has been updated",
                            cat.meta().generation,
                        );
                        let mut cat_clone = cat.clone();
                        if let Some(status) = cat_clone.status.as_mut() {
                            status.conditions.push(condition);
                            status.observed_generation = cat.meta().generation;
                        }
                        update_status(kube_client, cat_clone).await?
                    }
                    Err(e) => {
                        error!("Failed to update Cat: {:?}", e);
                        return Err(OperatorError::FailedToGetResource(e.into()));
                    }
                }
            }
        }
        Err(e) => {
            error!("Failed to get Cat: {:?}", e);
            return Err(OperatorError::FailedToGetResource(e.into()));
        }
    }

    Ok(())
}

fn error_policy(_resource: Arc<Cat>, error: &OperatorError, _ctx: Arc<ExtraArgs>) -> Action {
    error!("Error processing event: {:?}", error);
    Action::requeue(Duration::from_secs(REQUEUE_AFTER_IN_SEC))
}

async fn handle_delete(
    kube_client: &Api<Cat>,
    cat: &mut Cat,
    uuid: &str,
) -> Result<(), OperatorError> {
    let config = get_client_config().await?;
    if uuid.is_empty() {
        warn!("Cat has no status, cannot delete by id. Skipping...");
        return Ok(());
    }

    delete_cat_by_id(&config, uuid).await.map_err(|e| {
        error!("Failed to delete cat: {:?}", e);
        OperatorError::FailedToDeleteResource(e.into())
    })?;

    remove_finalizer(cat, kube_client.clone()).await?;
    info!("Successfully deleted cat");
    Ok(())
}

pub async fn handle_update(
    kube_client: &Api<Cat>,
    cat: &mut Cat,
    uuid: &str,
) -> Result<(), OperatorError> {
    let dto = converters::kube_type_to_dto(cat.clone());
    let config = get_client_config().await?;

    if uuid.is_empty() {
        return Err(OperatorError::InvalidResource("uuid is empty".to_string()));
    }

    update_cat_by_id(&config, uuid, dto)
        .await
        .map_err(|e| OperatorError::FailedToUpdateResource(e.into()))?;

    let cat_name = cat.metadata.name.as_deref().unwrap_or_default();
    kube_client
        .replace(cat_name, &PostParams::default(), cat)
        .await
        .map_err(|e| OperatorError::FailedToUpdateResource(e.into()))?;

    info!("Updated a cat by id went successfully");
    Ok(())
}

pub async fn handle_create(kube_client: &Api<Cat>, cat: &mut Cat) -> Result<(), OperatorError> {
    let dto = converters::kube_type_to_dto(cat.clone());
    let config = get_client_config().await?;

    match create_cat(&config, dto.clone()).await {
        Ok(remote_cat) => {
            if let Some(uuid) = remote_cat.uuid {
                let uuid = converters::uuid_to_string(Some(uuid)).unwrap();
                add_finalizer(cat, kube_client.clone()).await?;
                let generation = cat.meta().generation;
                let condition = create_condition(
                    "Created",
                    "AvailableCreated",
                    "Created the resource",
                    "Resource has been created",
                    generation,
                );
                if let Some(status) = cat.status.as_mut() {
                    if !status
                        .conditions
                        .iter()
                        .any(|c| c.type_ == "AvailableCreated")
                    {
                        status.conditions.push(condition);
                    }
                    status.uuid = Some(uuid);
                    status.observed_generation = generation;
                }
                update_status(kube_client, cat.clone())
                    .await
                    .map_err(|e| OperatorError::FailedToUpdateStatus(e.into()))
            } else {
                warn!("Remote cat has no uuid, cannot update status");
                Ok(())
            }
        }
        Err(e) => {
            error!("Failed to create a new cat: {:?}", e);
            Err(OperatorError::FailedToCreateResource(e.into()))
        }
    }
}

mod converters {
    use super::{Cat, CatDto, CatSpec};

    pub fn uuid_to_string(uuid: Option<uuid::Uuid>) -> Option<String> {
        uuid.map(|uuid| uuid.to_string())
    }

    fn string_to_uuid(uuid: Option<String>) -> Option<uuid::Uuid> {
        match uuid {
            Some(uuid) => match uuid::Uuid::parse_str(&uuid) {
                Ok(uuid) => Some(uuid),
                Err(_) => None,
            },
            None => None,
        }
    }

    pub fn kube_type_to_dto(cat: Cat) -> CatDto {
        let uuid = match cat.status {
            Some(status) => string_to_uuid(status.uuid),
            None => None,
        };
        CatDto {
            uuid,
            name: cat.spec.name,
            breed: cat.spec.breed,
            age: cat.spec.age,
        }
    }

    pub fn dto_to_kube_type(cat: CatDto) -> CatSpec {
        CatSpec {
            name: cat.name,
            breed: cat.breed,
            age: cat.age,
        }
    }
}
