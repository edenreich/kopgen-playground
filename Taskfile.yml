# This file is generated by kopgen. Do not edit manually. If you need to make adjustments add it to .openapi-generator-ignore file.
version: '3'

dotenv: ['.env']

tasks:
  docs:
    desc: Open the documentation
    cmds:
      - mdbook serve --open docs/operator

  oas-download:
    desc: Download OpenAPI specification
    cmds:
      - curl -o openapi.yaml {{.OPENAPI_DOWNLOAD_URL}}
    vars:
      requires:
        - OPENAPI_DOWNLOAD_URL

  oas-validate:
    desc: Validate the OpenAPI specification
    cmds:
      - |
        docker run --rm -v $(pwd):/app -w /app openapitools/openapi-generator-cli:v7.10.0 \
          validate -i openapi.yaml

  oas-hydrate:
    desc: Hydrate the OpenAPI specification with metadata
    cmds:
      - kopgen hydrate openapi.yaml

  oas-generate-rust-client:
    desc: Generate the OpenAPI Rust client
    cmds:
      - |
        docker run --rm -it -v $(pwd):/app -w /app openapitools/openapi-generator-cli:v7.10.0 \
          generate -c openapi-generator-config.yaml
      - sudo rm client-sdk/{.travis.yml,git_push.sh}

  lint:
    desc: Lint the code
    cmds:
      - cargo fmt --package operator -- --check
      - cargo fmt --package crdgen -- --check

  analyse:
    desc: Analyse the code
    cmds:
      - cargo clippy --all-targets --all-features -- -D warnings

  setup-target:
    desc: Conditionally add a Rust target based on TARGET_ARCH
    cmds:
      - |
        if [ -n "${TARGET_ARCH}" ]; then
          echo "Adding target architecture: ${TARGET_ARCH}";
          rustup target add ${TARGET_ARCH};
        else
          echo "TARGET_ARCH is not set. Skipping target addition.";
          echo "Using default target $(rustup show active-toolchain).";
        fi
    silent: true

  build:
    desc: Build the project
    deps:
      - setup-target
    cmds:
      - cargo build {{if eq .RELEASE "true"}}--release {{end}}{{if .TARGET_ARCH}}--target {{.TARGET_ARCH}}{{end}}

  generate-code:
    desc: Generate the Rust types and controllers from the OpenAPI specification
    cmds:
      - kopgen generate openapi.yaml --all .

  generate-crds:
    desc: Generate the k8s CRD's out of the rust structs
    cmds:
      - cargo run --package crdgen > manifests/crds/all.yaml

  generate:
    desc: Generate everything
    cmds:
      - task: oas-download
      - task: oas-hydrate
      - task: oas-validate
      - task: oas-generate-rust-client
      - task: generate-code
      - task: generate-crds

  run:
    desc: Run the k8s operator
    cmds:
      - RUST_LOG=info INSTALL_CRDS=true ACCESS_TOKEN="" cargo run --package operator -- run

  package:
    desc: Package the k8s operator
    cmds:
      - docker build -t {{.CONTAINER_REGISTRY}}/operator:latest . -- {{.CLI_ARGS}}
      - docker push {{.CONTAINER_REGISTRY}}/operator:latest

  deploy-operator:
    desc: Deploy the k8s operator
    cmds:
      - kubectl config use-context {{.CLUSTER_NAME}}
      - kubectl apply -f manifests/rbac/
      - kubectl apply -f manifests/operator/
      - kubectl rollout status deployment/operator

  test-e2e:
    deps:
      - package-fake-server
      - deploy-fake-server
    desc: Run the end-to-end tests
    cmds:
      - cargo test --package tests

  test-integration:
    desc: Run the integration tests
    cmds:
      - cargo test --package operator

  test:
    desc: Run all tests
    cmds:
      - task: test-integration
      - task: test-e2e

  cluster-create:
    desc: Create a k8s cluster
    cmds:
      - ctlptl apply -f Cluster.yaml

  cluster-delete:
    desc: Delete a k8s cluster
    cmds:
      - ctlptl delete -f Cluster.yaml

  deploy-crds:
    desc: Deploy the k8s CRD's
    cmds:
      - kubectl config use-context {{.CLUSTER_NAME}}
      - kubectl apply -f manifests/crds/all.yaml

  dirty-check:
    desc: Check if the project is dirty
    cmds:
      - task generate
      - git diff --quiet || (echo "Project is dirty" && exit 1)

  clean:
    desc: Clean the project
    cmds:
      - cargo clean
      - task cluster-delete
